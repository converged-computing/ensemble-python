# Algorithm details.

# Since we don't have support for grow or shrink of a cluster yet,
# instead of a reactive algorithm that might do that, let's better
# control submission. We would want to:

# 1. On creation, submit jobs under a specific set
# 2. Continue until we have a specific count completed with exit code 0
# 3. Run another set of jobs!

# Things you can do:
# 1. Label jobs that you submit
# 2. The labels generate metrics for groups (using online ML)
# 3. You can act on different metrics and events with known actions or custom functions

# Algorithm and options:
# I was originally going to have a section here, but an algorithm is
# actually the rules (triggers and actions) that make up the state machine.
# So while we could eventually package these and call them an algorithm,
# for now let's keep it simple and not add that layer of abstraction

# Turn on verbose debug logging?
logging:
  debug: false

# I made these the size of the cluster so we trigger scaling at least once
# We currently assume these are uniform (so no order enforced beyond the listing here)
jobs:
  - name: echo
    command: echo hello world
    count: 5
    nodes: 1
  - name: sleep
    command: sleep 10
    count: 5
    nodes: 1

rules:
  # 1. This rule says to submit the sleep jobs when we start
  - trigger: start
    action:
      name: submit
      label: sleep

  # This says to submit the echo hello world jobs when we have 3
  # successfully completed sleep jobs. This dot notation is a path into the
  # models data structure.
  - trigger: metric
    name: count.sleep.success
    when: 3
    action:
      name: submit
      label: echo
